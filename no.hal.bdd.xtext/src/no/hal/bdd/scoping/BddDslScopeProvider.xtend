/*
 * generated by Xtext 2.18.0.M3
 */
package no.hal.bdd.scoping

import java.util.Collection
import no.hal.bdd.bddDsl.ActionDef
import no.hal.bdd.bddDsl.BddDslPackage
import no.hal.bdd.bddDsl.EntityDef
import no.hal.bdd.bddDsl.EntityRef
import no.hal.bdd.bddDsl.Model
import no.hal.bdd.bddDsl.PropertyDef
import no.hal.bdd.bddDsl.StateName
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class BddDslScopeProvider extends AbstractBddDslScopeProvider {

	override IScope getScope(EObject context, EReference reference) {
		if (reference.EType == BddDslPackage.eINSTANCE.stateName) {
			scopeForWidgetModelElements(context, StateName);
		} else if (reference.EType == BddDslPackage.eINSTANCE.actionDef) {
			scopeForWidgetModelElements(context, ActionDef);
		} else if (reference.EType == BddDslPackage.eINSTANCE.propertyDef) {
			scopeForWidgetModelElements(context, PropertyDef);
		} else {
			super.getScope(context, reference)		
		}
	}

	def <T extends EObject> IScope scopeForWidgetModelElements(EObject context, Class<T> clazz) {
		val widgetDef = findWEntityDef(context)
		var all = if (widgetDef !== null) {
			getAllInheritedContentsOfType(widgetDef, clazz)
		} else {
			EcoreUtil2.getAllContentsOfType(widgetDef ?: findAncestorOfType(context, Model), clazz);
		}
		Scopes.scopeFor(all);
	}

	def Iterable<? extends EObject> getAllInheritedContentsOfType(EntityDef widgetDef, Class<? extends EObject> clazz) {
		val Collection<EObject> all = newArrayList
		all += EcoreUtil2.getAllContentsOfType(widgetDef, clazz)
		widgetDef.superEntities.forEach[all += getAllInheritedContentsOfType(it, clazz)]
		all.filter[clazz.isInstance(it)]
	}
	
	def <T> T findAncestorOfType(EObject context, Class<T> clazz) {
		var parent = context;
		while (parent !== null) {
			if (clazz.isInstance(parent)) {
				return parent as T;
			}
			parent = parent.eContainer();
		}
	}

	def EntityDef findWEntityDef(EObject context) {
		val feature = context.eClass.EAllStructuralFeatures.findFirst[EType == BddDslPackage.eINSTANCE.entityRef];
		if (feature !== null) {
			(context.eGet(feature) as EntityRef)?.entity
		} else {
			null
		}
	}
}
